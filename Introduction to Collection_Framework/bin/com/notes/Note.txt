Collection - The Collection in Java is a framework that provides an architecture to store and manipulate the 
==========	 group of objects.
			 
Iterator interface
==================

Iterator interface provides the facility of iterating the elements in a forward direction only.

Methods of Iterator interface
=============================

1	public boolean hasNext()	It returns true if the iterator has more elements otherwise it returns false.

2	public Object next()		It returns the element and moves the cursor pointer to the next element.

3	public void remove()		It removes the last elements returned by the iterator. It is less used.

Iterable Interface
==================

The Iterable interface is the root interface for all the collection classes. The Collection interface extends 
the Iterable interface and therefore all the subclasses of Collection interface also implement the Iterable 
interface.

It contains only one abstract method

Iterator<T> iterator()  		It returns the iterator over the elements of type T.

Collection Interface
====================

The Collection interface is the interface which is implemented by all the classes in the collection framework. 
It declares the methods that every collection will have.

Methods of Collection interface
===============================

1	public boolean add(E e)									It is used to insert an element in this collection.

2	public boolean addAll(Collection<? extends E> c)		It is used to insert the specified collection 
															elements in the invoking collection.

3	public boolean remove(Object element)					It is used to delete an element from the collection.

4	public boolean removeAll(Collection<?> c)				It is used to delete all the elements of the 
															specified collection from the invoking collection.

5	default boolean removeIf(Predicate<? super E> filter)	It is used to delete all the elements of the 
															collection that satisfy the specified predicate.

6	public boolean retainAll(Collection<?> c)				It is used to delete all the elements of invoking 
															collection except the specified collection.

7	public int size()										It returns the total number of elements in the 
															collection.

8	public void clear()										It removes the total number of elements from the 
															collection.

9	public boolean contains(Object element)					It is used to search an element.

10	public boolean containsAll(Collection<?> c)				It is used to search the specified collection in 
															the collection.

11	public Iterator iterator()								It returns an iterator.

12	public Object[] toArray()								It converts collection into array.

13	public <T> T[] toArray(T[] a)							It converts collection into array. Here, the 
															runtime type of the returned array is that of the 
															specified array.

14	public boolean isEmpty()								It checks if collection is empty.

15	default Stream<E> parallelStream()						It returns a possibly parallel Stream with the 
															collection as its source.

16	default Stream<E> stream()								It returns a sequential Stream with the collection 
															as its source.

17	default Spliterator<E> spliterator()					It generates a Spliterator over the specified 
															elements in the collection.

18	public boolean equals(Object element)					It matches two collections.

19	public int hashCode()									It returns the hash code number of the collection.

1. List Interface
=================

List interface is the child interface of Collection interface. It inhibits a list type data structure in which 
we can store the ordered collection of objects. It can have duplicate values.

List interface is implemented by the classes

a) ArrayList
b) LinkedList
c) Vector
d) Stack

To instantiate the List interface, we must use :

List<data-type> list1= new ArrayList<>();  
List<data-type> list2 = new LinkedList<>();  
List<data-type> list3 = new Vector<>();  
List<data-type> list4 = new Stack<>();

a) ArrayList
============

The ArrayList class implements the List interface. It uses a dynamic array to store the duplicate element of 
different data types. The ArrayList class maintains the insertion order and is non-synchronized. The elements 
stored in the ArrayList class can be randomly accessed.

b) LinkedList
=============

LinkedList implements the Collection interface. It uses a doubly linked list internally to store the elements.
It can store the duplicate elements. It maintains the insertion order and is not synchronized. In LinkedList, 
the manipulation is fast because no shifting is required.

c) Vector
=========

Vector uses a dynamic array to store the data elements. It is similar to ArrayList. However, It is 
synchronized and contains many methods that are not the part of Collection framework.

d) Stack
========

The stack is the subclass of Vector. It implements the last-in-first-out data structure, The stack contains 
all of the methods of Vector class and also provides its methods like boolean push(), boolean peek()

2. Queue Interface
==================

Queue interface maintains the first-in-first-out order. It can be defined as an ordered list that is used to 
hold the elements which are about to be processed.

There are various classes that implement the Queue interface

a) PriorityQueue
b) ArrayDeque

Queue interface can be instantiated as

Queue<data-type> q1 = new PriorityQueue<>();  
Queue<data-type> q2 = new ArrayDeque<>();

a) PriorityQueue
================

The PriorityQueue class implements the Queue interface. It holds the elements or objects which are to be 
processed by their priorities. PriorityQueue doesn't allow null values to be stored in the queue.

Deque Interface
===============

Deque interface extends the Queue interface. In Deque, we can remove and add the elements from both the side. 
Deque stands for a double-ended queue which enables us to perform the operations at both the ends.

Deque can be instantiated as:

Deque d = new ArrayDeque();

b) ArrayDeque
=============

ArrayDeque class implements the Deque interface. It facilitates us to use the Deque. We can add or delete the 
elements from both the ends. ArrayDeque is faster than ArrayList and Stack and has no capacity restrictions.

3. Set Interface
================

It represents the unordered set of elements which doesn't allow us to store the duplicate items. We can store 
at most one null value in Set.

To instantiate the Set interface, we must use :

a) HashSet
b) LinkedHashSet
c) TreeSet

Set can be instantiated as:

Set<data-type> s1 = new HashSet<>();  
Set<data-type> s2 = new LinkedHashSet<>();  
Set<data-type> s3 = new TreeSet<>();

a) HashSet
==========

It represents the collection that uses a hash table for storage. Hashing is used to store the elements in the 
HashSet. It contains unique items.

b) LinkedHashSet
================

It extends the HashSet class and implements Set interface. Like HashSet, It also contains unique elements. 
It maintains the insertion order and permits null elements.

SortedSet Interface
===================

The elements of the SortedSet are arranged in the increasing (ascending) order. The SortedSet provides the 
additional methods that inhibit the natural ordering of the elements.

The SortedSet can be instantiated as:

SortedSet<data-type> set = new TreeSet<>();

c) TreeSet
==========

Like HashSet, TreeSet also contains unique elements. However, the access and retrieval time of TreeSet is 
quite fast. The elements in TreeSet stored in ascending order.

Ways to iterate the elements of the collection in Java
======================================================

1. By Iterator interface.
2. By for-each loop.
3. By ListIterator interface.
4. By for loop.
5. By forEach() method.
6. By forEachRemaining() method.